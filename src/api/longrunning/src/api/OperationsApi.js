/**
 * google.golang.org/genproto/googleapis/longrunning/operations.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LongrunningCancelOperationRequest', 'model/LongrunningOperation', 'model/ProtobufEmpty'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/LongrunningCancelOperationRequest'), require('../model/LongrunningOperation'), require('../model/ProtobufEmpty'));
  } else {
    // Browser globals (root is window)
    if (!root.Googlegolangorggenprotogoogleapislongrunningoperationsproto) {
      root.Googlegolangorggenprotogoogleapislongrunningoperationsproto = {};
    }
    root.Googlegolangorggenprotogoogleapislongrunningoperationsproto.OperationsApi = factory(root.Googlegolangorggenprotogoogleapislongrunningoperationsproto.ApiClient, root.Googlegolangorggenprotogoogleapislongrunningoperationsproto.LongrunningCancelOperationRequest, root.Googlegolangorggenprotogoogleapislongrunningoperationsproto.LongrunningOperation, root.Googlegolangorggenprotogoogleapislongrunningoperationsproto.ProtobufEmpty);
  }
}(this, function(ApiClient, LongrunningCancelOperationRequest, LongrunningOperation, ProtobufEmpty) {
  'use strict';

  /**
   * Operations service.
   * @module api/OperationsApi
   * @version 1
   */

  /**
   * Constructs a new OperationsApi. 
   * @alias module:api/OperationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelOperation operation.
     * @callback module:api/OperationsApi~cancelOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtobufEmpty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts asynchronous cancellation on a long-running operation.  The server makes a best effort to cancel the operation, but success is not guaranteed.  If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.  Clients can use [Operations.GetOperation][google.longrunning.Operations.GetOperation] or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     * @param {String} name The name of the operation resource to be cancelled.
     * @param {module:model/LongrunningCancelOperationRequest} body 
     * @param {module:api/OperationsApi~cancelOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtobufEmpty}
     */
    this.cancelOperation = function(name, body, callback) {
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling cancelOperation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling cancelOperation");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProtobufEmpty;

      return this.apiClient.callApi(
        '/v1/{name}:cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOperation operation.
     * @callback module:api/OperationsApi~deleteOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtobufEmpty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     * @param {String} name The name of the operation resource to be deleted.
     * @param {module:api/OperationsApi~deleteOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtobufEmpty}
     */
    this.deleteOperation = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteOperation");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProtobufEmpty;

      return this.apiClient.callApi(
        '/v1/{name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOperation operation.
     * @callback module:api/OperationsApi~getOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LongrunningOperation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the latest state of a long-running operation.  Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * @param {String} name The name of the operation resource.
     * @param {module:api/OperationsApi~getOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LongrunningOperation}
     */
    this.getOperation = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getOperation");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LongrunningOperation;

      return this.apiClient.callApi(
        '/v1/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
